<?php
/**
 * @file natools
 *
 * Helpers functions and API for Drupal 7 sites.
 */

/**
 * Implements hook_theme()
 */
function natools_theme($existing, $type, $theme, $path) {
  return array(
    // display an embedded view.
    'natools_views_embed' => array(
      'variables' => array(
        'views_name'       => '', 
        'views_display_id' => '',
        'views_args'       => array(),
        'title'            => '',
        'title_tag'        => '',
        'title_class'  => '',
      ),
    ),
  );
}

function natools_field_is_checked($entity_type, $entity, $field) {
  $is_checked = FALSE;
  if ($items = field_get_items($entity_type, $entity, $field)) {
    if ($items[0]['value'] == 1) {
      $is_checked = TRUE;
    }
  }
  return $is_checked;
}


/**
 * Get direct children menu items for a parent menu item.   *
 * This function is NOT recursive. Consider using drupal native
 * menu_build_tree() if you need more features.
 *
 * @param string $path
 *   internal drupal path
 *
 * @param string $menu_name
 *   in which menu name we have to look for. This is required as
 *   the same link may be in several different menus with different
 *   hierarchies.
 *
 * @return
 *   array of nids of nodes that are part of children items menus.
 *
 * @TODO this function is not recursive for the moment, on only first level of children.
 * Use menu_node_views module if you need that.
 */
function natools_menu_children_get($path, $menu_name) {

  $query = db_select('menu_links', 'ml_parent');
  $query->join('menu_links', 'ml_children', 'ml_parent.mlid = ml_children.plid');
  $query->fields('ml_children');
  $query->condition('ml_parent.link_path', $path);
  $query->condition('ml_parent.menu_name', $menu_name);
  $query->condition('ml_children.menu_name', $menu_name);
  $query->orderBy('ml_children.weight', 'ASC');
  $query->orderBy('ml_children.link_title', 'ASC');
  $result = $query->execute();

  $items = array();
  foreach ($result as $row) {
    $items[] = $row;
  }
  return $items;
}

/**
 * Return only a part of a tree of a menu.
 *
 * @param $tree (array)
 *   Full tree af a menu, as returned by menu_tree_data()
 * @param $menu_link (array)
 *    Fully loaded menu link item. all items unders this one will be returned.
 *
 * @return array
 *   Part of tree under $menu_link item.
 *
 * @see menu_tree_data()
 */
static function natools_menu_subtree_get($tree, $menu_link) {
  $parents = array();
  for ($i = 1; $i <= $menu_link['depth']; $i++) {
    $parents[] = $menu_link["p$i"];
    $parents[] = 'below';
  }
  $sub_tree = drupal_array_get_nested_value($tree, $parents);
  return $sub_tree;
}


/**
 * @param $nid (int)
 *   find "parent" node of this nid.
 *
 * @param $menu_name
 *   In which menu we have to looking for our parent.
 *
 * @return (mixed)
 *   nid (int) of the parent node or FALSE if no nid is found.
 */
static function natools_menu_node_parent_get($nid, $menu_name) {
  // we are not using menu_node table as this is not mandatory to get the job done.
  $path = "node/$nid";
  $query = "SELECT ml2.link_path FROM  {menu_links} ml1 
    JOIN {menu_links} ml2 ON ml1.plid = ml2.mlid 
    WHERE ml1.link_path = :link_path";
  $result = db_query($query, array(':link_path' => $path))->fetchField();
  if ($result) {
    $nid = str_replace('node/', '', $result);
    return (int) $nid;
  }
  else {
    return FALSE;
  }
}

/**
 * @param $nid
 *   Nid of a node that is part of a drupal menu.
 * @return
 *   array of nids of nodes that are part of children items menus.
 *
 * @TODO this function is not recursive for the moment, on only first level of childs.
 * Use menu_node_views module if you need that.
 */
function natools_menu_node_children_get($nid) {

  if (!is_numeric($nid)) {
    trigger_error("nid argument should be numeric.");
    return;
  }

  // build link_path of our node, as it is stored in menu_links table.
  $node_path = "node/$nid";

  // find in menu_links table mlid (menu link id) associated to this node in the menu.
  // @FIXME if there is several menus, we will have bugs...
  $query = db_select('menu_links', 'ml');
  $query->addField('ml','mlid');
  $query->condition('ml.link_path', $node_path);
  $mlid = $query->execute()->fetchField();

  if (!$mlid) {
    return array();
  }

  // now, find all children items menu for our mlid; but only pathes that correspond to nodes.
  // we can't easily do that because we know that router_path is "node/%" for viewing node.
  $query = db_select('menu_links', 'ml');
  $query->join('menu_router', 'mr', 'ml.router_path = mr.path');
  $query->addField('ml','link_path');
  $query->condition('mr.path', 'node/%');
  $query->condition('ml.plid', $mlid);
  $query->orderBy('ml.weight');
  $rows = $query->execute();

  // rows contains all our children link_path pointing to nodes.
  // Extract nids from link_pathes.
  $nids = array();
  foreach ($rows as $row) {
    $nid = str_replace('node/', '', $row->link_path);
    if (is_numeric($nid)) {
      $nids[] = $nid;
    }
  }
  return $nids;

}

/**
 * to use as a "delivery callack" in a hook menu. This is something like "ajax_deliver"
 * from Drupal 7, without all php framework ajax stuff behind. As ajax_deliver, it offers
 * a way to know if page is requested by ajax or not.
 *
 * If js is not enabled, a normal drupal page will be displayed, fully loading blocks etc...
 * If ajax sent us a "http_request_sent_by_ajax' variable, we return only result of our menu callback
 * function, bypassing all drupal page system with all the blocks and heavy stuff.
 *
 * Use it typically when you want to write custom js to display (for example) a popup in ajax; rather than using 
 * drupal 7 ajax API.
 * 
 * To let us know if ajax is enabled, this is *developper* responsability to send
 * a GET $param called "http_request_sent_by_ajax" with value "1"..
 */
function natools_ajax_deliver_degradable($page_callback_result) {
  if (isset($_REQUEST['http_request_sent_by_ajax']) && $_REQUEST['http_request_sent_by_ajax'] == 1) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    print render($page_callback_result);
    drupal_exit();
  }
  else {
    return drupal_deliver_html_page($page_callback_result);
  }
}

/**
 * implements hook_preprocess_hooks()
 * Prepare variable for theme_na_tootls_views_embed.
 * @see theme_natools_views_embed()
 */
function template_preprocess_natools_views_embed(&$vars) {
  $view = views_get_view($vars['views_name'], $vars['views_display_id']);
  if (!$view || !$view->access($vars['views_display_id']) || !views_get_view_result($vars['views_name'], $vars['views_display_id'])) {
    $vars['view'] = FALSE;
  }
  else {

    // if we want no title, we have to put "<none>" has title value
    if ($vars['title'] == '<none>') {
      $vars['title'] = '';
    }
    // if not, use title asked, or title from view display if nothing was specified.
    else {
      $vars['title'] = $vars['title'] ? $vars['title'] : $view->display[$vars['views_display_id']]->display_title;
    }

    $vars['title_class'] = $vars['title_class'] ? $vars['title_class'] : 'views-embed-title';
    $vars['title_tag'] = $vars['title_tag'] ? $vars['title_tag'] : 'div';
    $vars['view'] = $view;
  }
}

/**
 * Display an embedded view, *only* if it has some results. May display views title or
 * a custom title. Html tags and title classes may be customized.
 *
 * @params $vars : an associative array containing :
 * - views_name (string) : name of the view to fetch
 * - views_display_id (string) : id of the display to fetch
 * - views_args (array) : array of arguments to pass to the view.
 * - title (string) :
 *     title for the views embedded.
 *     if empty, will display views title for this display_id.
 *     if <none>, no title will be displayed
 * - title_tag (string) : tag to use for title. A div by default
 * - title_class (string) : class to use for title.
 *
 * @see template_preprocess_natools_views_embed()
 */
function theme_natools_views_embed($vars) {
  $out = '';
  if ($vars['view']) {
    if ($vars['title']) {
      $out .= sprintf('<%s class="%s">%s</%s>', $vars['title_tag'], $vars['title_class'], $vars['title'], $vars['title_tag']);
    }
    $out .= $vars['view']->preview($vars['views_display_id'], $vars['views_args']);
  }
  return $out;
}

/**
 * A snippet is a string of the form "myobject?test=3&param2=true"
 */
function natools_parse_snippet($string) {
  $url = parse_url($string);
  if (isset($url['query'])) {
    parse_str($url['query'], $args);
  }
  else {
    $args = array();
  }
  return array(
    'name' => $url['path'],
    'params' => $args,
  );
}

/**
 * Parse a string list of snippets delimited by linebreaks :
 * my_object?test=3&param2=true
 * another_object?test=3&param2=true
 */
function natools_parse_snippet_list($string) {
  $lines = explode("\r\n", $string);
  $snippets = array();
  foreach ($lines as $line) {
    // ignore line beginning with a '//' comment.
    if (strpos(trim($line), '//') === 0) continue;
    $snippets[] = natools_parse_snippet($line);
  }
  return $snippets;
}


/**
 * Return nodes associated to tids. This is mainly a copy paste of native drupal
 * taxonomy_node_select, except that function can take several tids as argument,
 * and take care of dupplicate if any (when a node is associated to several terms, it would appear
 * several times when passing an array of tids to "taxonomy_select_nodes").
 *
 * We also care of pager, because count query have also to take in account that a node may be associated
 * to several terms.
 *
 * WARNING : offset options does not work with paginated queries. This seems to come
 * from native drupal pager.
 *
 * @param array $tids
 *   an array of term ids to match
 * @param array $options
 *   - pager : if TRUE, add a pager.
 *   - offset : (int) skip results at beginning (Does not work with drupal pager !)
 *   - limit : sql LIMIT.
 *   - order : order by. Take an array as arguments.
 *
 * @return array
 *   nids.
 */
function natools_taxonomy_nodes_select($tids, $options = array()) {

  if (!variable_get('taxonomy_maintain_index_table', TRUE)) {
    return array();
  }

  // default values for options.
  // please not that offset cannot work with pager queries...
  $options_default = array(
    'pager' => TRUE,
    'offset' => 0,
    'limit' => 10,
    'order' =>  array('t.sticky' => 'DESC', 't.created' => 'DESC')
  );

  $options = array_merge($options_default, $options);

  $query = db_select('taxonomy_index', 't');
  $query->addTag('node_access');
  $query->condition('tid', $tids);

  // avoid dupplicate, as a node may be attached to several terms.
  // Adding this here ensure that our "count_query" will use a distinct,
  // and so return a right total items number for pager.
  if ($options['pager']) {
    $count_query = clone $query;
    $count_query->addExpression('COUNT(DISTINCT(t.nid))');
    $query = $query->extend('PagerDefault');
    $query->setCountQuery($count_query);
    $query->limit($options['limit']);
  }
  else {
    $query->range($options['offset'], $options['limit']);
  }

  $query->addField('t', 'nid');
  foreach ($options['order'] as $field => $direction) {
    $query->orderBy($field, $direction);
    // ORDER BY fields need to be loaded too, assume they are in the form table_alias.name
    list($table_alias, $name) = explode('.', $field);
    $query->addField($table_alias, $name);
  }
  $nids = $query->execute()->fetchCol();

  return $nids;
}

/**
 * Return a nested array (a "tree") of terms instead of a "flat" array list.
 *
 * @param $terms
 *   an array of terms as returned by taxonomy_get_tree()
 *
 * @return (array)
 *   nested array of terms, according to their hierarchy.
 *
 * @see taxonomy_get_nested_tree.
 */
static function natools_taxonomy_get_tree($terms, $parent = 0, $max_depth = NULL, $load_entities = FALSE, $load_nids = FALSE, $parents_index = array(), $depth = 0) {
  foreach($terms as $term) {
    foreach($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach($return as &$term) {
    $term->children = array();
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = natools_taxonomy_get_tree($parents_index[$term->tid], $term->tid, $max_depth, $load_entities, $parents_index, $depth + 1);
    }
  }

  return $return;
}

/**
 * Rebuild a node breadcrumb based on the hierarchy of the term in
 * @param int $tid
 *   current tid.
 * @param $title_add bool
 *  if FALSE, remove title from the end of the breadcrumb
 */
function natools_taxonomy_breadcrumb_set($tid, $title_add = TRUE) {
  $current = (object) array(
    'tid' => $tid,
  );
  $breadcrumb = array();
  if ($title_add) {
    $breadcrumb[] = drupal_get_title();
  }
  while ($parents = taxonomy_get_parents($current->tid)) {
    $current = array_shift($parents);
    $breadcrumb[] = l($current->name, 'taxonomy/term/' . $current->tid);
  }
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb = array_reverse($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
}

