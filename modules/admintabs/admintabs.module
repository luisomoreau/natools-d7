<?php
/**
 * @file
 * admintabs module. See admintabs.php for some documentation.
 */

/**
 * Implements hook_menu()
 *
 * Build automatically menu local tasks based on infos returned by 
 * invocation of hook_admintabs_info()
 */
function admintabs_menu() {
  return admintabs_generate_tabs();
}

/**
 * Generate hook menu items based on infos returned by
 * invocation of hook_admintabs_info().
 * This is the heart of this module.
 */
function admintabs_generate_tabs() {

  $items = admintabs_get_tabs(); 

  $i = 1;
  foreach ($items as $path => $item) {
    
    // create parent menu item for our tabs.
    if ($i == 1) {
      $items[$path] = array(
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'path' => $path, // internal use.
        'page callback'  => 'admintabs_menu_callback_parent_tab',
        'page arguments' => array($items),
      );
      // merge but without overriding what we just defined.
      $items[$path] = array_merge($item, $items[$path]);
      $root_item = $items[$path];
    }
    else {
      // set default parameters to create classic and working drupal tabs.
      // There is no MENU_DEFAULT_LOCAL_TASK because we use parent menu item page callback
      // to decide where user should land, according to its role.
      $items[$path]['type'] =  MENU_LOCAL_TASK;
      // user can access a tab if he has permission for this tabs OR permission for whole tabset.
      $items[$path]['access arguments'] = array(
        admintabs_tab_permission_name_get($path), 
        admintabs_tabset_permission_name_get($root_item['path']),
      );
      $items[$path]['access callback'] = 'admintabs_menu_access_callback';
      $items[$path]['page callback'] = 'admintabs_menu_callback_empty_page';
      $items[$path]['weight'] = $i;

      // handle custom "redirect" key. Settings this key to an internal drupal
      // path allow to redirect user to url of your choice when clicking on tab. 
      if (!empty($tab['redirect'])) {
        $items[$path]['page callback'] = 'admintabs_menu_callback_redirect';
        $items[$path]['page arguments'] = array($path, $item);
      }
      // merge all keys. Override default keys at your own risks in your hook_admintabs_info().
      $items[$path] = array_merge($items[$path], $item);
    }
    $i++;
  }
  return $items;
}

/**
 * hook_permission()
 * 
 * automatically generate a permission for each tab
 * and a global permission for all tabs.
 */
function admintabs_permission() {
  $permissions = array();
  $items = admintabs_get_tabs();
  $i = 1;
  foreach ($items as $path => $item) {
    if ($i == 1) {
      $permission_name = admintabs_tabset_permission_name_get($path);
      $permissions[$permission_name] = array(
        'title' => t('Access all tabs from ' . $item['title']),
        'description' => "machine name :  $permission_name",
      );
    }
    else {
      $permission_name = admintabs_tab_permission_name_get($path);
      $permissions[$permission_name] = array(
        'title' => t('Access ' . $item['title'] . ' tab.'),
        'description' => 'machine name : ' . $permission_name, 
      );
    }
    $i++;
  }
  return $permissions;
}

/**
 * Implements hook_theme()
 */
function admintabs_theme($existing, $type, $theme, $path) {
  return array(
    'admintabs_login_form' => array('variables' => array()),
  );
}

/**
 * Default page callback for our tabs menu items. Return nothing,
 * thoses pages may be filled by block.
 */
function admintabs_menu_callback_empty_page() {
  // by default, drupal only display parent tab title. Use tab title prefixed by parent tab title instead.
  $item = menu_get_item();
  drupal_set_title(drupal_get_title() . ' : ' . $item['title']);
  return '';
}

/**
 * Special page callback for parent tab menu item.
 * Route user to a specific tab or display a login form if he is
 * not logged in.
 */
function admintabs_menu_callback_parent_tab($items) {
  global $user;
  if ($user->uid) {
    admintabs_tab_router($items);
    return '';
  }
  else {
    return theme('admintabs_login_form');
  }
}

/**
 * Page callback that perform a redirection to specified path. Trying to avoid
 * infinite redirections...
 */
function admintabs_menu_callback_redirect($path, $item) {
  $destination = array();
  // dev may set a "destination" key to force destination path for a particular menu item.
  if (isset($item['destination']) && $item['destination'] != $path) {
    $destination = array('destination' => $item['destination']);
  }
  else {
    if ($db_item = menu_get_item($path)) {
      $destination = array('destination' => $db_item['tab_parent']);
    }
  }

  //drupal_goto($item['redirect'], array('query' => $destination));

}

/**
 * Our menu callback access for all tabs : we allow to access a tab :
 * - if user has permission to this specific tab.
 * - OR if user has permission to see all tabs from this tabset.
 */
function admintabs_menu_access_callback($permission_tab, $permission_tabset) {
  return user_access($permission_tab) || user_access($permission_tabset) ? TRUE : FALSE;
}

/**
 * For now, simply return hooks. 
 */
function admintabs_get_tabs() {
  return module_invoke_all('admintabs_info');
}

/**
 * redirect user to the right tab given its role.
 */
function admintabs_tab_router($items) {
  global $user;

  // by default, set first tab as default active tab.
  $default_tab = array_slice(array_keys($items), 1, 1);

  // if a default tab key has been defined, redirect user according to its role.
  // if its role is not found in this array, it will be redirect to $default_tab set above.
  if (isset($tabset['#default tab'])) {
    // redirect to first role found, may cause some surprises for user having multiple roles...
    foreach ($redirections as $rid => $tab_path) {
      if (in_array($rid, array_keys($user->roles))) {
        $default_tab = $tabset_path . '/' . $redirections[$rid];
        break;
      }
    }
  }

  //drupal_goto($default_tab);

}

/**
 * Generate a permission machine name for a tab using *full path* of a tab
 * (e.g admin/dashboard/ma_tab)
 */
function admintabs_tab_permission_name_get($full_path) {
  return "access tab $full_path";
}

/**
 * Generate a permission machine name for all tabs for a specifif tabset.
 */
function admintabs_tabset_permission_name_get($full_path) {
  return "access all tabs under $full_path";
}

/**
 * Display a login form.
 */
function theme_admintabs_login_form($variables) {
  $form = drupal_get_form('user_login');
  return drupal_render($form); 
}

