<?php
/**
 * @file
 * admintabs module. See admintabs.php for some documentation.
 */

/************************
 * HOOKS
 ************************/

/**
 * Implements hook_menu()
 *
 * Build automatically menu local tasks based on infos returned by 
 * invocation of hook_admintabs_info()
 */
function admintabs_menu() {
  $items = array();
  _admintabs_menu_generate($items);
  return $items;
}

/**
 * Generate hook menu items based on infos returned by
 * invocation of hook_admintabs_info().
 */
function _admintabs_menu_generate(&$items) {

  // get all tabsets defined by module. If no tabsets founds, abort.
  if (!$tabsets = admintabs_get_tabsets()) return; 

  // let other modules alter defined tabsets.
  drupal_alter('admintabs_tabsets', $tabsets);
  
  foreach ($tabsets as $tabset_path => $tabset) {

    // first build parent menu item.
    $items[$tabset_path] = array(
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      // this callback will be automatically called by tab defined as MENU_DEFAULT_LOCAL_TASK
      // This is a drupal behavior.
      'page callback'  => 'admintabs_menu_callback_parent_tab',
      'page arguments' => array($tabset_path, $tabset),
    );
    // merge all others keys coming from tabset, if any. Overrides default parameters at your own risks.
    $items[$tabset_path] = array_merge($items[$tabset_path], $tabset);
    
    // find default tab for this tabset.
    $defaut_tab_path = admintabs_get_default_tab_path($tabset);

    // now attach local tasks to this parent menu item.
    $i = 1;
    foreach ($tabset['tabs'] as $tab_path => $tab) {

      $path = "$tabset_path/$tab_path";

      // set default parameters to create classic and working drupal tabs.
      // There is no MENU_DEFAULT_LOCAL_TASK because we use parent menu item page callback
      // to decide where user should land, according to its role.
      $items[$path]['type'] =  MENU_LOCAL_TASK;
      // user can access a tab if he has permission for this tabs OR permission for whole tabset.
      $items[$path]['access arguments'] = array(admintabs_tab_permission_name_create($path), admintabs_tabset_permission_name_create($tabset_path));
      $items[$path]['access callback'] = 'admintabs_menu_access_callback';
      $items[$path]['page callback'] = 'admintabs_menu_callback_empty_page';
      $items[$path]['weight'] = $i;

      // handle custom "redirect" key. Settings this key to an internal drupal
      // path allow to redirect user to url of your choice when clicking on tab. 
      if (!empty($tab['redirect'])) {
         $items[$path]['page callback'] = 'admintabs_menu_callback_redirect';
         $items[$path]['page arguments'] = array($tabset_path, $tabset, $tab_path, $tab);
      }

      // merge all others keys comming from tabs. Overrides default parameters at your own risks.
      $items[$path] = array_merge($items[$path], $tab);
      $i++;
    }

  }

}

/**
 * hook_permission()
 * 
 * automatically generate a permission for each tabs
 * and a global permission for all tabs from a tabset.
 */
function admintabs_permission() {
  $permissions = array();

  // create automaticaly one permissions per tab.
  $tabsets = admintabs_get_tabsets();
  foreach ($tabsets as $tabset_path => $tabset) {

    // create a global permissions for all tabs of a specific tabset
    $permission_name = admintabs_tabset_permission_name_create($tabset_path);
    $permissions[$permission_name] = array(
      'title' => t('Access all tabs from ' . $tabset['title']),
      'description' => "machine name :  $permission_name",
    );

    // now create automaticcally a permission for each tab.
    foreach ($tabset['tabs'] as $path => $tab) {
      // do nothing if this tab is a "redirection" to anothe drupal page. 
      if (!empty($tab['redirect'])) continue;
      $permission_name = admintabs_tab_permission_name_create($tabset_path . '/' . $path);
      $permissions[$permission_name] = array(
        'title' => t('Access tab for ' . $tab['title'] . ' page.'),
        'description' => 'machine name : ' . admintabs_tab_permission_name_create($tabset_path . '/' . $path)
      );
    }
  }
  return $permissions;
}

/**
 * Implements hook_theme()
 */
function admintabs_theme($existing, $type, $theme, $path) {
  return array(
    'admintabs_login_form' => array('variables' => array()),
  );
}

/***********************
 * Menu callbacks
 **********************/

/**
 * Default page callback for our tabs menu items. Return nothing,
 * thoses pages may be filled by block.
 */
function admintabs_menu_callback_empty_page() {
  return '';
}

/**
 * Special page callback for parent tab menu item.
 * Route user to a specific tab or display a login form if he is
 * not logged in.
 */
function admintabs_menu_callback_parent_tab($tabset_path, $tabset) {
  global $user;
  if ($user->uid) {
    admintabs_tab_router($tabset_path, $tabset);
    return '';
  }
  else {
    return theme('admintabs_login_form');
  }
}

/**
 * Page callback that perform a redirection to specified path. Trying to avoid
 * infinite redirections...
 */
function admintabs_menu_callback_redirect($tabset_path, $tabset_set, $tab_path, $tab) {

  $destination = array();
  if (isset($tab['destination']) && $tab['destination'] != $tabset_path . '/' . $tab_path) {
    $destination = array('destination' => $tab['destination']);
  }
  else {
    if ($item = menu_get_item($tabset_path . '/' . $tab_path)) {
      $destination = array('destination' => $item['tab_parent']);
    }
  }
  
  drupal_goto($tab['redirect'], array('query' => $destination));
  
}

/**
 * Our menu callback access for all tabs : we allow to access a tab :
 * - if user has permission to this specific tab.
 * - OR if user has permission to see all tabs from this tabset.
 */
function admintabs_menu_access_callback($permission_tab, $permission_tabset) {
  return user_access($permission_tab) || user_access($permission_tabset) ? TRUE : FALSE;
}

/********************
 * Helpers functions
 ********************/

/**
 * For now, simply return hooks. 
 */
function admintabs_get_tabsets() {
  return module_invoke_all('admintabs_info');
}

/**
 * redirect user to the right tab given its role.
 */
function admintabs_tab_router($tabset_path, $tabset) {
  global $user;
  if (empty($tabset['default tab'])) return;
  
  $redirections = $tabset['default tab'];
  if(!empty($redirections['all'])) {
    $path = $tabset_path . '/' . $redirections['all'];
    drupal_goto($path);
  }
  else {
    foreach ($redirections as $rid => $tab_path) {
      if (in_array($rid, array_keys($user->roles))) {
        drupal_goto($tabset_path . '/' . $redirections[$rid]);
      }
    }
  }
}

/**
 * Generate a permission machine name for a tab using *full path* of a tab
 * (e.g admin/dashboard/ma_tab)
 */
function admintabs_tab_permission_name_create($full_path) {
  return "access tabs api tab $full_path";
}

/**
 * Generate a permission machine name for all tabs for a specifif tabset.
 */
function admintabs_tabset_permission_name_create($full_path) {
  return "access tabs api all tabs from tabset $full_path";
}

/**
 * Display a login form.
 */
function theme_admintabs_login_form($variables) {
  $form = drupal_get_form('user_login');
  return drupal_render($form); 
}

/**
 * Return default tab path. If no default tab is defined in invoked hook,
 * return first tab path found.
 */
function admintabs_get_default_tab_path($tabset) {
  foreach ($tabset['tabs'] as $path => $tab) {
    if (!empty($tab['default'])) return $path;
  }
  $keys = array_keys($tabset['tabs']);
  return reset($keys);
}

